{
  "openapi": "3.1.0",
  "info": {
    "version": "1.0.0",
    "title": "DataAnalysis",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "description": "This is a documentation of DataAnalysis app"
  },
  "servers": [
    {
      "url": "http://127.0.0.1:8000/api"
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Operation for auth."
    },
    {
      "name": "Users",
      "description": "Operation with users."
    }
  ],
  "paths": {
    "/auth/register": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "User registration",
        "operationId": "registerUser",
        "description": "Registers a new user.\n",
        "security": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/authRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered and authenticated successfully.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully registered!"
                    },
                    "data": {
                      "description": "Short user info",
                      "$ref": "#/components/schemas/authResponse"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "User authentication",
        "operationId": "loginUser",
        "description": "Authenticates a user with their credentials. Returns an access token in the response body, and sets refreshToken and sessionId in cookies.\n",
        "security": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/authRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User authenticated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully logged in an user!"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "user",
                        "accessToken"
                      ],
                      "properties": {
                        "user": {
                          "description": "Short user info",
                          "$ref": "#/components/schemas/authResponse"
                        },
                        "accessToken": {
                          "description": "Access token",
                          "type": "string",
                          "example": "NOfB2S2e0OVHjvJb41gxPf4Rc6gwZmblEgiC4axh"
                        }
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Set-Cookie": {
                "description": "Cookies set by the server include `refreshToken` and `sessionId`, which are HttpOnly and secure.\n",
                "schema": {
                  "type": "string",
                  "example": "refreshToken=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9; HttpOnly; Path=/; sessionId=abc123session456; HttpOnly; Path=/;"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "User logout",
        "operationId": "logoutUser",
        "description": "User logout and clears session cookies",
        "security": [],
        "parameters": [
          {
            "in": "cookie",
            "name": "sessionId",
            "required": true,
            "schema": {
              "type": "string",
              "example": "65ca67e7ae7f10c88b598384"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User successfully logged out and session cookies cleared",
            "headers": {
              "Set-Cookie": {
                "description": "Cleared session cookies (sessionId, refreshToken)",
                "schema": {
                  "type": "string",
                  "example": "sessionId=; Path=/; HttpOnly; SameSite=Strict; Expires=Thu, 01 Jan 1970 00:00:00 GMT"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/current": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get current user information",
        "operationId": "getCurrentUser",
        "description": "Retrieve the currently authenticated user's information (name, email, etc.)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved current user information!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found user info!"
                    },
                    "data": {
                      "description": "The full information of current user",
                      "$ref": "#/components/schemas/userResponse"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Update current user information",
        "operationId": "updateCurrentUser",
        "description": "Update the currently authenticated user's information (e.g., name, email, etc.)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/userRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated the user information!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully updated user information"
                    },
                    "data": {
                      "description": "The updated user object",
                      "$ref": "#/components/schemas/userResponse"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "schemas": {
      "authRequest": {
        "type": "object",
        "required": [
          "email",
          "password"
        ],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "example": "user@example.com"
          },
          "password": {
            "type": "string",
            "format": "password",
            "example": "Password123!"
          }
        }
      },
      "authResponse": {
        "type": "object",
        "required": [
          "_id",
          "name",
          "email"
        ],
        "properties": {
          "_id": {
            "description": "User's id",
            "type": "string",
            "example": "65e4decdd286b30065d54af9"
          },
          "name": {
            "description": "User's name",
            "type": "string",
            "example": "John Doe"
          },
          "email": {
            "description": "User's email",
            "type": "string",
            "example": "user@example.com"
          }
        }
      },
      "userResponse": {
        "type": "object",
        "required": [
          "_id",
          "name",
          "email",
          "gender",
          "weight",
          "sportTime",
          "waterNorm",
          "avatar",
          "createdAt",
          "updatedAt"
        ],
        "properties": {
          "_id": {
            "description": "User's id",
            "type": "string",
            "example": "65e4decdd286b30065d54af9"
          },
          "name": {
            "description": "User's name",
            "type": "string",
            "example": "John Doe"
          },
          "email": {
            "description": "User's email",
            "type": "string",
            "example": "user@example.com"
          },
          "gender": {
            "description": "Gender of the User",
            "type": "string",
            "enum": [
              "male",
              "female"
            ],
            "example": "female",
            "default": "female"
          },
          "weight": {
            "description": "User's weight (kg)",
            "type": "number",
            "example": 56,
            "default": 0
          },
          "sportTime": {
            "description": "Active time for sports (hours)",
            "type": "number",
            "example": 1,
            "default": 0
          },
          "waterNorm": {
            "description": "Daily water intake norm (L)",
            "type": "number",
            "example": 1.8,
            "default": 0
          },
          "avatar": {
            "description": "Link to a photo of the User",
            "type": "string",
            "format": "uri",
            "default": null,
            "example": "https://res.cloudinary.com/dwtbnd1j6/image/upload/v1736237618/ueyjycmmmp7n5yornfot.webp"
          },
          "createdAt": {
            "description": "User account creation timestamp",
            "type": "string",
            "format": "date-time",
            "example": "2023-01-01T12:00:00Z"
          },
          "updatedAt": {
            "description": "Last user profile update timestamp",
            "type": "string",
            "format": "date-time",
            "example": "2023-01-01T12:00:00Z"
          }
        }
      },
      "userRequest": {
        "type": "object",
        "properties": {
          "name": {
            "description": "User's name",
            "type": "string",
            "example": "John Doe"
          },
          "email": {
            "description": "User's email",
            "type": "string",
            "format": "email",
            "example": "user@example.com"
          },
          "gender": {
            "description": "Gender of the User ('male' or 'female')",
            "type": "string",
            "enum": [
              "male",
              "female"
            ],
            "example": "female"
          },
          "weight": {
            "description": "User's weight (kg)",
            "type": "number",
            "example": 56,
            "minimum": 0,
            "maximum": 500
          },
          "sportTime": {
            "description": "Active time for sports (hours)",
            "type": "number",
            "example": 1,
            "minimum": 0,
            "maximum": 24
          },
          "waterNorm": {
            "description": "Daily water intake norm (L)",
            "type": "number",
            "example": 1.8,
            "minimum": 0,
            "maximum": 10
          },
          "avatar": {
            "description": "Link to file with user's avatar",
            "type": "string",
            "format": "binary"
          }
        }
      }
    },
    "responses": {
      "400": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "message": {
                  "type": "string",
                  "example": "BadRequestError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Bad Request. Invalid parameter."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "401": {
        "description": "Unauthorized Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "example": "UnauthorizedError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "404": {
        "description": "Resource Not Found Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 404
                },
                "message": {
                  "type": "string",
                  "example": "NotFoundError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "DataAnalysis record not found for the specified ID or query"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "409": {
        "description": "Email is already in use",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 409
                },
                "message": {
                  "type": "string",
                  "example": "Email is already in use"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Email is already in use"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "500": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 500
                },
                "message": {
                  "type": "string",
                  "example": "Internal Server Error"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Something went wrong"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}